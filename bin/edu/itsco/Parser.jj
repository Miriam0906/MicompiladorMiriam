/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Parser)package edu.itsco;

import java.util.ArrayList;

public class Parser{

  private static ArrayList<Variable> listaVariable;  public static void main(String args [])  {
    listaVariable = new ArrayList<Variable>();    Parser parser = new Parser(System.in);

   try { 
    System.out.println("Biembenidos a mi compilador Miri");    Parser.gramaticaPrincipal();
     System.out.println("Compilacion exitosa att:Miri");
   }catch (ParseException pex) {
		System.err.println(pex.getMessage());
      }catch (SemanticException es) {
        System.err.println(es.getMessage());

      }  }

  private static boolean existeVariable(Variable variable) {
	return listaVariable.contains(variable);
  }

  private static void agregarVariable(Variable variable)
  throws SemanticException{
    if(!existeVariable(variable)){
      listaVariable.add(variable);
       }else {
		throw new SemanticException(variable, SemanticException.Tipo.VARIABLE_DUPLICADA);
       }
    }
   private static void variableDefinida(Variable variable)
    throws SemanticException{
	if(!existeVariable(variable)){
      throw new SemanticException (variable,
      SemanticException.Tipo.VARIABLE_NO_DEFINIDA);
       }
     }
     }PARSER_END(Parser)SKIP :{  " "| "\r"| "\t"| "\n"}
//PALABRAS RESERVADAS
TOKEN :
{
  < PROGRAMA : "programa" >
| < FIN : "fin" >

| < ENTERO : "entero" >
| < CADENA : "cadena" >
| < DECIMAL : "decimal" >

| < IMPRIMIR : "imprimir" >
| < CAPTURAR : "capturar" >
//CICLO IF
| < SI : "si" >
| < SINO : "sino" >
//CICLO SWITCH
| < SELECCIONA : "seleciona" >
| < CASO : "caso" >
| < ROMPER: "romper">
| < DEFECTO: "defecto">

//CICLO FOR
| < PARA : "para" >

//CICLO WHILE
| < MIENTRAS : "mientras" >
| < HACER : "hacer" >

}

//SIMBOLOS Y OPERADORES
TOKEN :
{
 < SUMA : "+" >
| < RESTA : "-" >
| < MULTIPLICACION : "*" >
| < DIVICION : "/" >
| < RESIDUO : "%" >
| < POT : "^" >
| < IGUAL: "=">

| < MAYOR : ">" >
| < MENOR : "<" >

| < AND : "&&" >
| < OR : "||" >
| < NOT : "!" >

| < AP: "(" >
| < CP: ")" >

| < ALL: "{" >
| < CLL: "}" >

| < PC: ";" >
| < PP: ":" >
}
TOKEN :
{
 <#digitos: ["0"-"9"] >
| <#letras: ["a"-"z","A"-"Z"] >
| <ID: (<letras>|"_")(<letras>|<digitos>|"_")*>

| <VALOR_ENTERO: (<digitos >)+ >
| <VALOR_DECIMAL: (< digitos >)+"."(< digitos >)+ >
| <VALOR_CADENA:("\"" (~["\""])+ "\"") >
}

//SECCION DE GRAMATICA

void gramaticaPrincipal()throws SemanticException:
{
 
}{
   <PROGRAMA> <ID> <ALL>
   gramaticaSentencias()
   <CLL>
}

void gramaticaSentencias()throws SemanticException:{
  }{
    (
    gramaticaDeclararVariables()
  | gramaticaCapturar()
  | gramaticaImprimir()
  | gramaticaSi()
  | gramaticaMientras()
  | gramaticaHacerMientras()
  | gramaticaSelecciona()
  | gramaticaAsignacion()
  | gramaticaPara()
    
 	)+
}

void gramaticaDeclararVariables() throws SemanticException :{
  Token id;
  Token tipoDato;
  }{
    tipoDato = tipoDato() id = <ID>
	{
	  Variable v = new Variable(id.image,tipoDato.image);
	}
    [<IGUAL> valor()
	{v.setEstaInicializada(true);}
    ]
    {
      agregarVariable(v);
    }
    <PC> 
}
Token tipoDato():{
  Token tipoDato;
  } { 
  		(
   			 tipoDato = <ENTERO >
   			 | tipoDato =  < CADENA >
   			 | tipoDato = < DECIMAL >
    	)
    	{return tipoDato; }
}

void valor()throws SemanticException:{
  Token id;
  }{
    (
    <VALOR_ENTERO >
    |  < VALOR_CADENA >
    | < VALOR_DECIMAL >
    | id = < ID >
    {
        Variable v = new Variable();
        v.setId(id.image);
        variableDefinida(v);
      }
    )
}

void gramaticaCapturar()throws SemanticException: {
  Token id;
  } {
      <CAPTURAR > < AP > id = <ID >< CP> < PC>
      {
        Variable v = new Variable();
        v.setId(id.image);
        variableDefinida(v);
      }
  }
void gramaticaImprimir()throws SemanticException: {
   } {

     <IMPRIMIR> < AP >valor()
     (<SUMA> valor())*
     < CP> < PC>
}
void gramaticaSi()throws SemanticException: {
   } {

     <SI> < AP >condicion()< CP >
     <ALL >
     	gramaticaSentencias()
     <CLL>
    [<SINO > <ALL >
    	gramaticaSentencias()
     < CLL> ]
}
void condicion()throws SemanticException: {
   } {
     evaluacionSimple() (opLogico() evaluacionSimple())*

}
void evaluacionSimple()throws SemanticException: {
   } {
     valor() opRelacional() valor()
}   
void opRelacional(): {
   } {
     <MAYOR > [<IGUAL >]
   |   <MENOR > [<IGUAL >]
   |   <NOT > <IGUAL >
   |   <IGUAL > <IGUAL >   
}
void opLogico(): {
   } {
     <AND >|< OR >  
}
void gramaticaMientras()throws SemanticException: {
   } {
     <MIENTRAS ><AP > condicion() <CP >
     <ALL >
     	gramaticaSentencias()
     <CLL >
}
void gramaticaHacerMientras()throws SemanticException: {
   } {
     < HACER > <ALL >
     	gramaticaSentencias()
     <CLL > <MIENTRAS ><AP > condicion() <CP ><PC >
}
void gramaticaSelecciona()throws SemanticException: {
   } {
     <SELECCIONA > <AP > <ID > <CP >
     < ALL >
     (       
     < CASO ><VALOR_ENTERO ><PP > gramaticaSentencias()
     < ROMPER ><PC >
   )+
   [<DEFECTO > gramaticaSentencias() [<ROMPER ><PC>]]
   < CLL >
}
void gramaticaAsignacion()throws SemanticException: {
	Token id;
   } {
     id = <ID > <IGUAL >  operacionSimple() <PC >
     {
       Variable v = new Variable();
        v.setId(id.image);
        variableDefinida(v);
     }
}
void operacionSimple()throws SemanticException: {
   } {
     (
       valor()|operacionParentesis()
     )
     (operadorAritmetico()
     	(valor() | operacionParentesis()) )*   
}

void operacionParentesis()throws SemanticException: {
   } {
     < AP >operacionSimple()< CP >
}

void operadorAritmetico(): {
   } {
     < SUMA >| < RESTA > | < DIVICION >| < MULTIPLICACION >|< RESIDUO >   
}

void gramaticaPara()throws SemanticException: {
   } {
     < PARA ><AP ><ID ><IGUAL >valor()< PC > condicion() < PC >
       < ID >(
         < SUMA ><SUMA >
         | < RESTA ><RESTA >
         |< IGUAL > operacionSimple()
         )< CP >
         < ALL >
         gramaticaSentencias()
         < CLL >
              
}



